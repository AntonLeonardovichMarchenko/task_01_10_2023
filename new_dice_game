import random
from theGame import DicePlay

# d = DicePlay(11) # это только для проверки,
# что импорт произведён корректно

"""
в классе Dice_new дополнительно объявлены 
режимы игры в кости. Эти режимы предполагают разные 
условия для определения победы:
1 - совпадение хотя бы ОДНОЙ из костей
2 - совпадение значений ДВУХ костей
3 - совпадение СУММЫ значений ДВУХ костей

новая схема представляет собой класс Dice_new, который 
наследует ранее объявленный класс DicePlay. В результате 
наследования в классе определяется переменная "тип игры",
благодаря которой в методе throw_dices появляется возможность 
реализации дополнительного алгоритма для определения 
условия победы  
"""
class DicePlayException(Exception):
    def __init__(self, numAttemps, message):
        self.numAttemps = numAttemps
        self.massage = message

# переопределение класса Dice
class Dice_new(DicePlay):   # новый класс наследует DicePlay
    def __init__(self, N, typeOfVictory):
        super().__init__(N)  # обращение к родительскому классу:
        # инициализация объекта - представителя базового класса
        self.typeOfVictory = typeOfVictory

    def throw_dices(self):
        dice_1 = random.randint(1, 6)
        dice_2 = random.randint(1, 6)

        # поправили количество произведённых бросков
        self.current_throw += 1

        if self.throw_N > self.current_throw:
            if self.typeOfVictory == 1:
                # оценил. Это вместо 4х операций сравнения!
                if {dice_1 in {self._dice_num_1, self._dice_num_2}} or {dice_2 in {self._dice_num_1, self._dice_num_2}}:
                    return True
            elif self.typeOfVictory == 2:
                if {dice_1, dice_2} == {self._dice_num_1, self._dice_num_2}:
                    return True
                else:
                    return False
            elif self.typeOfVictory == 3:
                if dice_1 + dice_2 == self._dice_num_1 + self._dice_num_2:
                    return True
                else:
                    return False
        else:
            raise DicePlayException(self.current_throw, 'number of attempts exceeded')
